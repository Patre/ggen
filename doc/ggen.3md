% GGEN(3) GGen Library Manual
% Swann Perarnau

# NAME

ggen - graph generation library

# SYNOPSIS

	#include<ggen.h>
	igraph_t *ggen_generate_erdos_gnm(gsl_rng *r, unsigned long n, unsigned long m);
	igraph_t *ggen_generate_erdos_gnp(gsl_rng *r, unsigned long n, double p);
	igraph_t *ggen_generate_erdos_lbl(gsl_rng *r,
					  unsigned long n, double p, unsigned long nbl);
	
	igraph_t *ggen_generate_fifo(gsl_rng *r,
					  unsigned long n, unsigned long od, unsigned long id);
	
	igraph_t *ggen_generate_random_orders(gsl_rng *r,
					  unsigned long n, unsigned int orders);
	
	igraph_vector_t * ggen_analyze_longest_path(igraph_t *g);
	igraph_vector_t * ggen_analyze_longest_antichain(igraph_t *g);
	igraph_vector_t * ggen_analyze_lowest_single_ancestor(igraph_t *g);
	
	enum ggen_transform_t { GGEN_TRANSFORM_SOURCE, GGEN_TRANSFORM_SINK };
	int ggen_transform_add(igraph_t *g, enum ggen_transform_t t);
	int ggen_transform_delete(igraph_t *g, enum ggen_transform_t t);

# DESCRIPTION

The GGen library provides an implementation of several random dag generators used
in scheduling research. Along with these generators, a collection of analysis and
utility fonctions are provided.

The graph data structure comes from the [Igraph][] library.
Random Number Generators come from [GSL][].

## Generation Functions

All generation function take as argument a random number generator _r_ from GSL. This
generator must be initialized before the function call.

+ `ggen_generate_erdos_gnm()`

	Generates a DAG having _n_ nodes and _m_ edges. Edges are selected all at once among
	all the possible edges of a DAG.

	This is very similar to the *G(n,m)* random graph model but only edges that are
	valid in a DAG are taken into account.

+ `ggen_generate_erdos_gnp()`

	Generates a DAG having _n_ nodes. Each possible edges of the DAG is tested for inclusion 
	(with a *Bernouilli trial*) with probability _p_.

	This is very similar to the *G(n,p)* random graph model but, again, only edges valid
	in a DAG are taken into account.

+ `ggen_generate_erdos_lbl()`

	Generates a DAG having _n_ nodes and _nbl_ levels. A level is defined as a
	group of nodes that cannot share an edge. Nodes are dispatched uniformly inside
	_nbl_ levels before applying the *erdos G(n,p)* algorithm with probability _p_.

+ `ggen_generate_fifo()`

	Generates a DAG having at least _n_ nodes using a *Fan-in/Fan-out* algorithm.
	Starting with a single node, this function alternates (with equal probability)
	between *expansion* phases where new nodes are added to a node having few
	outgoing edges, and *contraction* phases where a random number of heavy nodes
	are given the same child.

	Be aware that the _od_ (maximum outdegree) has a lot of influence on the graph
	structure (way more than _id_ (maximum indegree).

+ `ggen_generate_random_orders()`

	Generates a DAG having _n_ nodes and which partial order is the intersection
	of _orders_ total orders.

	Graph theory tells us that a DAG is a partial order. A partial order can be
	generated by intersecting any number of randomly generated total orders. This
	is exactly what this function does.

## Analysis Functions

+ `ggen_analyze_longest_path()`

	Computes the longest path in _g_. Returns it as a vector containing the nodes of the path in order.

+ `ggen_analyze_longest_antichain()`

	Computes the longest antichain of g. Returns it as a vector containing the nodes of the chain (no specific order).

+ `ggen_analyze_lowest_single_ancestor()`

	Computes the lowest single ancestor of all vertices of g. Returns it as vector, where v(i) is the lsa of vertex id i (in igraph).

## Tranformation Functions

Transformation functions have a *type* parameter: _t_. This parameter change the goal of the transformations.

+ `ggen_transform_add()`

	Either a single source to the DAG _g_ or a single sink.

+ `ggen_transform_delete()`

	Either delete all sources of the DAG _g_ or all sinks.

# NOTES

Functions returning a `igraph_t *` should call `igraph_destroy` before `free`ing the pointer.

You are responsible for the quality of the random number generator given to the
generation functions. Be aware that the default RNG used by the GSL might not be appropriate.

# BUGS

No known bugs.

# REPORTING BUGS

If you find any bug or have any comment on this library, contact
the main developer directly: [Swann Perarnau][].

# COPYRIGHT

Copyright (C) 2009-2011 Swann Perarnau and others.
License CeCILL: Open Source, GPL Compatible <http://www.cecill.info>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

# SEE ALSO

This tool was presented in a full article at the [Simutools][] Conference
in March 2010.  You can find a
copy of this article on the GGen [website][].

[Swann Perarnau]: swann.perarnau@imag.fr
[website]: http://ggen.ligforge.imag.fr
[simutools]: http://www.simutools.org/2010/
[igraph]: http://igraph.sourceforge.net "Igraph"
[gsl]: http://www.gnu.org/software/gsl "GNU Scientific Library"
